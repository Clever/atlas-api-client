swagger: '2.0'
info:
  title: atlas-api-client
  description: "Swagger description of the MongoDB Atlas API: https://docs.atlas.mongodb.com/reference/api-resources/. Used to generate client code to interact with the API."
  version: 0.5.0
  x-npm-package: atlas-api-client
basePath: /api/atlas/v1.0
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
responses:
  Unauthorized:
    description: "Unauthorized"
    schema:
      $ref: "#/definitions/Unauthorized"
  NotFound:
    description: "Not found"
    schema:
      $ref: "#/definitions/NotFound"
  BadRequest:
    description: "Bad Request"
    schema:
      $ref: "#/definitions/BadRequest"
  Conflict:
    description: "Conflict"
    schema:
      $ref: "#/definitions/Conflict"
  InternalError:
    description: "Internal Error"
    schema:
      $ref: "#/definitions/InternalError"
paths:
  /groups/{groupID}/clusters:
    get:
      operationId: getClusters
      description: Get all clusters
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetClustersResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
    post:
      operationId: createCluster
      description: Create a Cluster
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: createOrUpdateClusterRequest
          in: body
          schema:
            $ref: "#/definitions/CreateOrUpdateClusterRequest"
          required: true
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Cluster"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
  /groups/{groupID}/clusters/{clusterName}:
    get:
      operationId: getCluster
      description: Gets a cluster
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: clusterName
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Cluster"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
    patch:
      operationId: updateCluster
      description: Update a Cluster
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: clusterName
          in: path
          required: true
          type: string
        - name: createOrUpdateClusterRequest
          in: body
          schema:
            $ref: "#/definitions/CreateOrUpdateClusterRequest"
          required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Cluster"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
    delete:
      operationId: deleteCluster
      description: Deletes a cluster
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: clusterName
          in: path
          required: true
          type: string
      responses:
        202:
          description: "Accepted"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"

  /groups/{groupID}/clusters/{clusterName}/snapshots:
    get:
      operationId: getSnapshots
      description: Gets snapshots for a cluster
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: clusterName
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetSnapshotsResponse"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
  /groups/{groupID}/clusters/{clusterName}/restoreJobs:
    get:
      operationId: getRestoreJobs
      description: Get all restore jobs for a cluster
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: clusterName
          in: path
          required: true
          type: string
          description: "Name of the source cluster for the restore job (the cluster that contained the snapshot to restore)"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetRestoreJobsResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
    post:
      operationId: createRestoreJob
      description: Create a restore job
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: clusterName
          in: path
          required: true
          type: string
          description: "Name of the cluster that contains the snapshot to restore"
        - name: createRestoreJobRequest
          in: body
          schema:
            $ref: "#/definitions/CreateRestoreJobRequest"
          required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/RestoreJob"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
  /groups/{groupID}/clusters/{sourceClusterName}/restoreJobs/{jobID}:
    get:
      operationId: getRestoreJob
      description: Get one restore job
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: sourceClusterName
          in: path
          required: true
          type: string
        - name: jobID
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/RestoreJob"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"

  /groups/{groupID}/databaseUsers:
    get:
      operationId: getDatabaseUsers
      description: Get All DatabaseUsers
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetDatabaseUsersResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
    post:
      operationId: createDatabaseUser
      description: Create a DatabaseUser
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: createDatabaseUserRequest
          in: body
          schema:
            $ref: "#/definitions/CreateDatabaseUserRequest"
          required: true
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/DatabaseUser"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
  /groups/{groupID}/databaseUsers/admin/{username}:
    get:
      operationId: getDatabaseUser
      description: Gets a database user
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: username
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/DatabaseUser"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
    patch:
      operationId: updateDatabaseUser
      description: Update a DatabaseUser
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: username
          in: path
          required: true
          type: string
        - name: updateDatabaseUserRequest
          in: body
          schema:
            $ref: "#/definitions/UpdateDatabaseUserRequest"
          required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/DatabaseUser"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
    delete:
      operationId: deleteDatabaseUser
      description: Deletes a DatabaseUser
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: username
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Accepted"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
  /groups/{groupID}/processes:
    get:
      operationId: getProcesses
      description: Get All Processes
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetProcessesResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
  /groups/{groupID}/processes/{host}:{port}/measurements:
    get:
      operationId: getProcessMeasurements
      description: Get measurements for a specific Atlas MongoDB process (mongod or mongos).
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: host
          in: path
          required: true
          type: string
        - name: port
          in: path
          required: true
          type: integer
        - name: granularity
          in: query
          required: true
          type: string
          enum: &granularityStrings ["PT1M", "PT5M", "PT1H", "P1D"]
        - name: period
          in: query
          required: false
          type: string
        - name: start
          in: query
          required: false
          type: string
          format: date-time
        - name: end
          in: query
          required: false
          type: string
          format: date-time
        - name: m
          in: query
          required: false
          type: array
          items:
            type: string
        - name: pageNum
          in: query
          required: false
          type: integer
        - name: itemsPerPage
          in: query
          required: false
          type: integer
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetProcessMeasurementsResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
  /groups/{groupID}/processes/{host}:{port}/databases:
    get:
      operationId: getProcessDatabases
      description: Get the available databases for a Atlas MongoDB Process
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: host
          in: path
          required: true
          type: string
        - name: port
          in: path
          required: true
          type: integer
        - name: pageNum
          in: query
          required: false
          type: integer
        - name: itemsPerPage
          in: query
          required: false
          type: integer
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetProcessDatabasesResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
  /groups/{groupID}/processes/{host}:{port}/databases/{databaseID}/measurements:
    get:
      operationId: getProcessDatabaseMeasurements
      description: Get the measurements of the specified database for a Atlas MongoDB process.
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: host
          in: path
          required: true
          type: string
        - name: port
          in: path
          required: true
          type: integer
        - name: databaseID
          in: path
          required: true
          type: string
        - name: granularity
          in: query
          required: true
          type: string
          enum: &granularityStrings ["PT1M", "PT5M", "PT1H", "P1D"]
        - name: period
          in: query
          required: false
          type: string
        - name: start
          in: query
          required: false
          type: string
          format: date-time
        - name: end
          in: query
          required: false
          type: string
          format: date-time
        - name: m
          in: query
          required: false
          type: array
          items:
            type: string
        - name: pageNum
          in: query
          required: false
          type: integer
        - name: itemsPerPage
          in: query
          required: false
          type: integer
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetProcessDatabaseMeasurementsResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"

  /groups/{groupID}/processes/{host}:{port}/disks:
    get:
      operationId: getProcessDisks
      description: Get the available disks for a Atlas MongoDB Process
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: host
          in: path
          required: true
          type: string
        - name: port
          in: path
          required: true
          type: integer
        - name: pageNum
          in: query
          required: false
          type: integer
        - name: itemsPerPage
          in: query
          required: false
          type: integer
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetProcessDisksResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
  /groups/{groupID}/processes/{host}:{port}/disks/{diskName}/measurements:
    get:
      operationId: getProcessDiskMeasurements
      description: Get the measurements of the specified disk for a Atlas MongoDB process.
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: host
          in: path
          required: true
          type: string
        - name: port
          in: path
          required: true
          type: integer
        - name: diskName
          in: path
          required: true
          type: string
        - name: granularity
          in: query
          required: true
          type: string
          enum: &granularityStrings ["PT1M", "PT5M", "PT1H", "P1D"]
        - name: period
          in: query
          required: false
          type: string
        - name: start
          in: query
          required: false
          type: string
          format: date-time
        - name: end
          in: query
          required: false
          type: string
          format: date-time
        - name: m
          in: query
          required: false
          type: array
          items:
            type: string
        - name: pageNum
          in: query
          required: false
          type: integer
        - name: itemsPerPage
          in: query
          required: false
          type: integer
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetProcessDiskMeasurementsResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"

  /groups/{groupID}/containers:
    get:
      operationId: getContainers
      description: Get All Containers
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetContainersResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
    post:
      operationId: createContainer
      description: Create a Container
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: createOrUpdateContainerRequest
          in: body
          schema:
            $ref: "#/definitions/CreateOrUpdateContainerRequest"
          required: true
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Container"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"
  /groups/{groupID}/containers/{containerID}:
    get:
      operationId: getContainer
      description: Gets a container
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: containerID
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Container"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
    patch:
      operationId: updateContainer
      description: Update a Container
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: containerID
          in: path
          required: true
          type: string
        - name: createOrUpdateContainerRequest
          in: body
          schema:
            $ref: "#/definitions/CreateOrUpdateContainerRequest"
          required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Container"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        403:
          description: "Forbidden"
          schema:
            $ref: "#/definitions/Forbidden"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/Conflict"
        429:
          description: "To Many Requests"
          schema:
            $ref: "#/definitions/TooManyRequests"

  /groups/{groupID}/peers:
    get:
      operationId: getPeers
      description: Get All VPC Peering Connections in One Project (first page only)
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/GetPeersResponse"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
    post:
      operationId: createPeer
      description: Create One New VPC Peering Connection
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: createPeerRequest
          in: body
          schema:
            $ref: "#/definitions/CreatePeerRequest"
          required: true
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Peer"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
  /groups/{groupID}/peers/{peerID}:
    get:
      operationId: getPeer
      description: Gets One Specific VPC Peering Connection
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: peerID
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Peer"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
    patch:
      operationId: updatePeer
      description: Update One Existing VPC Peering Connection
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: peerID
          in: path
          required: true
          type: string
        - name: updatePeerRequest
          in: body
          schema:
            $ref: "#/definitions/UpdatePeerRequest"
          required: true
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Peer"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"
    delete:
      operationId: deletePeer
      description: Delete One Existing VPC Peering Connection
      parameters:
        - name: groupID
          in: path
          required: true
          type: string
        - name: peerID
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Success"
        401:
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/NotFound"

definitions:
  Unauthorized:
    type: object
    properties:
      reason:
        type: string
      error:
        x-go-name: errorCode
        type: integer
      detail:
        x-go-name: message
        type: string
      message:
        x-go-name: unused
        type: string
  NotFound:
    type: object
    properties:
      reason:
        type: string
      error:
        x-go-name: errorCode
        type: integer
      detail:
        x-go-name: message
        type: string
      message:
        x-go-name: unused
        type: string
  BadRequest:
    type: object
    properties:
      reason:
        type: string
      error:
        x-go-name: errorCode
        type: integer
      detail:
        x-go-name: message
        type: string
      message:
        x-go-name: unused
        type: string
  Conflict:
    type: object
    properties:
      reason:
        type: string
      error:
        x-go-name: errorCode
        type: integer
      detail:
        x-go-name: message
        type: string
      message:
        x-go-name: unused
        type: string
  Forbidden:
    type: object
    properties:
      reason:
        type: string
      error:
        x-go-name: errorCode
        type: integer
      detail:
        x-go-name: message
        type: string
      message:
        x-go-name: unused
        type: string
  TooManyRequests:
    type: object
    properties:
      reason:
        type: string
      error:
        x-go-name: errorCode
        type: integer
      detail:
        x-go-name: message
        type: string
      message:
        x-go-name: unused
        type: string
  InternalError:
    type: object
    properties:
      reason:
        type: string
      error:
        x-go-name: errorCode
        type: integer
      detail:
        x-go-name: message
        type: string
      message:
        x-go-name: unused
        type: string

  GetClustersResponse:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Cluster'
      totalCount:
        type: integer

  GetRestoreJobsResponse:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/RestoreJob'
      totalCount:
        type: integer

  AutoScaling:
    type: object
    properties:
      diskGBEnabled:
        type: boolean

  ProviderSettings:
    type: object
    properties:
      backingProviderName:
        type: string
        enum:
          - AWS
      providerName:
        type: string
        enum:
          - AWS
          - TENANT
      diskIOPS:
        type: integer
      encryptEBSVolume:
        type: boolean
      instanceSizeName:
        type: string
        enum:
          - M2
          - M5
          - M10
          - M20
          - M30
          - M40
          - M50
          - M60
          - M100
          - M200
      regionName:
        type: string
        enum:
          - US_WEST_1
          - US_WEST_2
          - US_EAST_1

  RestoreJobDelivery:
    type: object
    properties:
      methodName:
        type: string
        enum:
          - "AUTOMATED_RESTORE"
          # @TODO - "HTTP"
      targetGroupId: # for AUTOMATED_RESPONSE must send delivery.targetGroupId, and delivery.targetClusterName or delivery.targetClusterId
        type: string
      targetClusterName: # Use the clusterName returned in the response body of the Get All Snapshots and Get a Snapshot endpoints.
        type: string
      # targetClusterId: # Use the clusterId returned in the response body of the Get All Snapshots and Get a Snapshot endpoints.
      #   type: string
  RestoreJobResponseDelivery:
    type: object
    properties:
      methodName:
        type: string
        enum:
          - "AUTOMATED_RESTORE"
          - "HTTP"
      statusName:
        description: Current status of the downloadable file.
        type: string
        enum:
          - "NOT_STARTED"
          - "IN_PROGRESS"
          - "READY"
          - "FAILED"
          - "INTERRUPTED"
          - "EXPIRED"
          - "MAX_DOWNLOADS_EXCEEDED"
  RestoreJob:
    type: object
    properties:
      clusterId:
        type: string
        description: Unique identifier of the cluster the restore job represents.
      created:
        type: string
        description: Timestamp in ISO 8601 date and time format in UTC when the restore job was requested.
      delivery:
        $ref: "#/definitions/RestoreJobResponseDelivery"
      encryptionEnabled:
        type: boolean
        description: Indicates whether the restored snapshot data is encrypted.
      groupId:
        type: string
        description: Unique identifier of the project that owns the restore job.
      hashes:
        type: array
        description: If the corresponding delivery.url has been downloaded, each document in this array is a mapping of a restore file to a hashed checksum. This array is present only after the file is downloaded.
        items:
          $ref: "#/definitions/RestoreJobResponseHash"
      id:
        type: string
        description: Unique identifier of the restore job.
      links:
        type: array
        description: One or more links to sub-resources and/or related resources.
        items:
          $ref: '#/definitions/Link'
      masterKeyUUID:
        type: string
        description: KMIP master key ID used to encrypt the snapshot data (only if encryptionEnabled is true for the snapshot).
      snapshotId:
        type: string
        description: Unique identifier of the snapshot to restore.
      statusName:
        type: string
        description: Current status of the job.
        enum:
          - "FINISHED"
          - "IN_PROGRESS"
          - "BROKEN"
          - "KILLED"
      timestamp:
        $ref: "#definitions/SnapshotTimestamp"
  RestoreJobResponseHash:
    type: object
    properties:
      typeName:
        type: string
        description: Hashing algorithm used to compute the hash value. If present, this value is SHA1.
      fileName:
        type: string
        description: Name of the file that has been hashed.
      hash:
        type: string
        description: Hash of the file.

  GetSnapshotsResponse:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Snapshot'
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      totalCount:
        type: integer
  Snapshot:
    type: object
    properties:
      clusterId:
        type: string
        description: The unique ID of the cluster that the snapshot represents.
      complete:
        type: boolean
        description: Indicates whether the snapshot exists. This is false if the snapshot creation job is in progress.
      created:
        $ref: "#/definitions/SnapshotTimestamp"
      doNotDelete:
        type: boolean
        description: Specifies whether the snapshot can be deleted.
      expires:
        type: string
        format: date-time
        description: The date in ISO 8601 date and time format in UTC after which Atlas deletes the snapshot. If doNotDelete is set to true, any value in expires is removed. If the expires value is earlier than the current date and time, the snaphot cannot be edited.
      groupId:
        type: string
        description: ID of the project that owns the snapshot.
      id:
        type: string
        description: ID of the snapshot.
      lastOplogAppliedTimestamp:
        $ref: "#/definitions/SnapshotTimestamp"
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      parts:
        type: array
        description: The individual parts that comprise the complete snapshot. For a replica set, this array contains a single document. For a sharded cluster, this array contains one document for each shard plus one document for the config server.
        items:
          $ref: '#/definitions/SnapshotPart'
  SnapshotTimestamp:
    type: object
    properties:
      date:
        type: string
        description:  Timestamp in ISO 8601 date and time format in UTC of the latest oplog entry in the snapshot.
      increment:
        type: number
        description: Order of all operations completed at the latest oplog entry in the snapshot.
  SnapshotPart:
    type: object
    properties:
      clusterId:
        type: string
        description: ID of the replica set.
      compressionSetting:
        type: string
        description: Method of compression for the snapshot.
      dataSizeBytes:
        type: number
        description: The total size of the data in the snapshot in bytes.
      encryptionEnabled:
        type: boolean
        description: Indicates whether the snapshot is encrypted.
      fileSizeBytes:
        type: number
        description: The total size of the data files in bytes.
      masterKeyUUID:
        type: string
        description: The KMIP master key ID used to encrypt the snapshot data. NOTE - This appears only if encryptionEnabled is true.
      mongodVersion:
        type: string
        description: The version of MongoDB that the replica set primary was running when the snapshot was created.
      replicaSetName:
        type: string
        description: Name of the replica set.
      storageSizeBytes:
        type: number
        description: The total size of space allocated for document storage.
      typeName:
        type: string
        description: The type of server that the part represents
        enum:
        - "REPLICA_SET"
        - "CONFIG_SERVER_REPLICA_SET"

  ReplicationSpec:
    type: object
    properties:
      US_EAST_1:
        $ref: "#/definitions/ReplicationSpecItem"
      US_WEST_1:
        $ref: "#/definitions/ReplicationSpecItem"
      US_WEST_2:
        $ref: "#/definitions/ReplicationSpecItem"
  ReplicationSpecItem:
    type: object
    properties:
      electableNodes:
        type: integer
      priority:
        type: number
      readOnlyNodes:
        type: integer

  Cluster:
    type: object
    properties:
      autoScaling:
        $ref: "#/definitions/AutoScaling"
      backupEnabled:
        type: boolean
      diskSizeGB:
        type: number
      groupId:
        type: string
      mongoDBVersion:
        type: string
      mongoURI:
        type: string
      mongoURIUpdated:
        type: string
      mongoURIWithOptions:
        type: string
      name:
        type: string
      numShards:
        type: integer
      paused:
        type: boolean
      providerSettings:
        $ref: "#/definitions/ProviderSettings"
      replicationFactor:
        type: number
      replicationSpec:
        $ref: "#/definitions/ReplicationSpec"
      stateName:
        type: string

  CreateOrUpdateClusterRequest:
    type: object
    properties:
      autoScaling:
        $ref: "#/definitions/AutoScaling"
      name:
        type: string
      mongoDBMajorVersion:
        type: string
        enum:
          - "3.2"
          - "3.4"
          - "3.6"
      numShards:
        type: integer
        default: 1
        minimum: 1
        maximum: 12
      paused:
        type: boolean
        description: Indicates whether the cluster is paused or not.
      providerSettings:
        $ref: "#/definitions/ProviderSettings"
      replicationFactor:
        type: integer
      replicationSpec:
        $ref: "#/definitions/ReplicationSpec"
      diskSizeGB:
        type: number
        maximum: 4096
      backupEnabled:
        x-nullable: true
        type: boolean


  CreateRestoreJobRequest:
    type: object
    required:
      - delivery
    properties:
      delivery:
        $ref: "#/definitions/RestoreJobDelivery"
      pointInTimeUTCMillis:
        type: string
        description: A timestamp in the number of milliseconds that have elapsed since the UNIX epoch that represents the point in time to which your data will be restored. This timestamp must be within last 24 hours of the current time.
      snapshotId:
        type: string
        description: Unique identifier of the snapshot to restore.


  DatabaseUser:
    type: object
    properties:
      databaseName:
        type: string
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      groupId:
        type: string
      username:
        type: string
      roles:
        type: array
        items:
          $ref: '#/definitions/Role'

  Role:
    type: object
    properties:
      databaseName:
        type: string
      collectionName:
        type: string
      roleName:
        $ref: '#/definitions/RoleName'

  RoleName:
    type: string
    enum:
    - "atlasAdmin"
    - "readWriteAnyDatabase"
    - "readAnyDatabase"
    - "backup"
    - "clusterMonitor"
    - "dbAdmin"
    - "dbAdminAnyDatabase"
    - "enableSharding"
    - "read"
    - "readWrite"

  Link:
    type: object
    properties:
      rel:
        type: string
      href:
        type: string

  GetDatabaseUsersResponse:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/DatabaseUser'
      totalCount:
        type: integer

  CreateDatabaseUserRequest:
    type: object
    allOf:
      - $ref: '#/definitions/DatabaseUser'
      - type: object
        properties:
          password:
            type: string

  UpdateDatabaseUserRequest:
    type: object
    properties:
      roles:
        type: array
        items:
          $ref: '#/definitions/Role'
      password:
        type: string

  GetProcessesResponse:
    type: object
    properties:
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      results:
        type: array
        items:
          $ref: '#/definitions/Process'
      totalCount:
        type: integer

  Process:
    type: object
    properties:
      created:
        type: string
        format: date-time
      groupId:
        type: string
      hostname:
        type: string
      id:
        type: string
      lastPing:
        type: string
        format: date-time
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      port:
        type: integer
      shardName:
        type: string
      replicaSetName:
        type: string
      typeName:
        $ref: '#/definitions/ProcessType'
      version:
        type: string

  ProcessType:
    type: string
    enum:
    - "REPLICA_PRIMARY"
    - "REPLICA_SECONDARY"
    - "RECOVERING"
    - "SHARD_MONGOS"
    - "SHARD_CONFIG"
    - "SHARD_STANDALONE"
    - "SHARD_PRIMARY"
    - "SHARD_SECONDARY"
    - "NO_DATA"

  GetProcessMeasurementsResponse:
    type: object
    properties:
      end:
        type: string
        format: date-time
      granularity:
        $ref: '#/definitions/Granularity'
      groupId:
        type: string
      hostId:
        type: string
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      measurements:
        type: array
        items:
          $ref: '#/definitions/Measurement'
      processId:
        type: string
      start:
        type: string
        format: date-time

  Granularity:
    type: string
    enum: *granularityStrings

  Measurement:
    type: object
    properties:
      dataPoints:
        type: array
        items:
          $ref: '#/definitions/DataPoint'
      name:
        type: string
      units:
        $ref: '#/definitions/Units'

  DataPoint:
    type: object
    #required: ["value"] # make value a pointer
    properties:
      timestamp:
        type: string
        format: date-time
      value:
        x-nullable: true
        type: number

  Units:
    type: string
    enum:
    - "PERCENT"
    - "MILLISECONDS"
    - "BYTES"
    - "GIGABYTES"
    - "BYTES_PER_SECOND"
    - "MEGABYTES_PER_SECOND"
    - "GIGABYTES_PER_HOUR"
    - "SCALAR_PER_SECOND"
    - "SCALAR"

  GetProcessDatabasesResponse:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Database'
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      totalCount:
        type: integer

  Database:
    type: object
    properties:
      databaseName:
        type: string
      links:
        type: array
        items:
          $ref: '#/definitions/Link'

  GetProcessDatabaseMeasurementsResponse:
    type: object
    properties:
      databaseName:
        type: string
      end:
        type: string
        format: date-time
      granularity:
        $ref: '#/definitions/Granularity'
      groupId:
        type: string
      hostId:
        type: string
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      measurements:
        type: array
        items:
          $ref: '#/definitions/Measurement'
      processId:
        type: string
      start:
        type: string
        format: date-time

  GetProcessDisksResponse:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Disk'
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      totalCount:
        type: integer

  Disk:
    type: object
    properties:
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      partitionName:
        type: string

  GetProcessDiskMeasurementsResponse:
    type: object
    properties:
      end:
        type: string
        format: date-time
      granularity:
        $ref: '#/definitions/Granularity'
      groupId:
        type: string
      hostId:
        type: string
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      measurements:
        type: array
        items:
          $ref: '#/definitions/Measurement'
      partitionName:
        type: string
      processId:
        type: string
      start:
        type: string
        format: date-time

  GetContainersResponse:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Container'
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      totalCount:
        type: integer

  CreateOrUpdateContainerRequest:
    type: object
    properties:
      atlasCidrBlock:
        type: string
      providerName:
        type: string
        enum:
        - "AWS"
      regionName:
        type: string
  Container:
    type: object
    properties:
      id:
        type: string
      providerName:
        type: string
      atlasCidrBlock:
        type: string
      regionName:
        type: string
      vpcId:
        type: string
      provisioned:
        type: boolean

  Peer:
    type: object
    properties:
      accepterRegionName:
        type: string
      awsAccountId:
        type: string
      connectionId:
        type: string
      containerId:
        type: string
      errorStateName:
        $ref: '#/definitions/PeerErrorState'
      id:
        type: string
      routeTableCidrBlock:
        type: string
      statusName:
        $ref: '#/definitions/PeerStatus'
      vpcId:
        type: string

  PeerErrorState:
    type: string
    enum:
    - "REJECTED"
    - "EXPIRED"
    - "INVALID_ARGUMENT"

  PeerStatus:
    type: string
    enum:
    - "INITIATING"
    - "PENDING_ACCEPTANCE"
    - "FAILED"
    - "FINALIZING"
    - "AVAILABLE"
    - "TERMINATING"

  UpdatePeerRequest:
    type: object
    properties:
      awsAccountId:
        type: string
      providerName:
        type: string
      routeTableCidrBlock:
        type: string
      vpcId:
        type: string

  GetPeersResponse:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Peer'
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      totalCount:
        type: integer

  CreatePeerRequest:
    type: object
    properties:
      accepterRegionName:
        type: string
      awsAccountId:
        type: string
      containerId:
        type: string
      providerName:
        type: string
      routeTableCidrBlock:
        type: string
      vpcId:
        type: string
