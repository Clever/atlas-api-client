// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetricValue metric value
// swagger:model MetricValue
type MetricValue struct {

	// number
	Number int64 `json:"number,omitempty"`

	// units
	Units string `json:"units,omitempty"`
}

// Validate validates this metric value
func (m *MetricValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnits(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var metricValueTypeUnitsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RAW","BITS","BYTES","KILOBITS","KILOBYTES","MEGABITS","MEGABYTES","GIGABITS","GIGABYTES","TERABYTES","PETABYTES","MILLISECONDS","SECONDS","MINUTES","HOURS","DAYS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricValueTypeUnitsPropEnum = append(metricValueTypeUnitsPropEnum, v)
	}
}

const (
	// MetricValueUnitsRAW captures enum value "RAW"
	MetricValueUnitsRAW string = "RAW"
	// MetricValueUnitsBITS captures enum value "BITS"
	MetricValueUnitsBITS string = "BITS"
	// MetricValueUnitsBYTES captures enum value "BYTES"
	MetricValueUnitsBYTES string = "BYTES"
	// MetricValueUnitsKILOBITS captures enum value "KILOBITS"
	MetricValueUnitsKILOBITS string = "KILOBITS"
	// MetricValueUnitsKILOBYTES captures enum value "KILOBYTES"
	MetricValueUnitsKILOBYTES string = "KILOBYTES"
	// MetricValueUnitsMEGABITS captures enum value "MEGABITS"
	MetricValueUnitsMEGABITS string = "MEGABITS"
	// MetricValueUnitsMEGABYTES captures enum value "MEGABYTES"
	MetricValueUnitsMEGABYTES string = "MEGABYTES"
	// MetricValueUnitsGIGABITS captures enum value "GIGABITS"
	MetricValueUnitsGIGABITS string = "GIGABITS"
	// MetricValueUnitsGIGABYTES captures enum value "GIGABYTES"
	MetricValueUnitsGIGABYTES string = "GIGABYTES"
	// MetricValueUnitsTERABYTES captures enum value "TERABYTES"
	MetricValueUnitsTERABYTES string = "TERABYTES"
	// MetricValueUnitsPETABYTES captures enum value "PETABYTES"
	MetricValueUnitsPETABYTES string = "PETABYTES"
	// MetricValueUnitsMILLISECONDS captures enum value "MILLISECONDS"
	MetricValueUnitsMILLISECONDS string = "MILLISECONDS"
	// MetricValueUnitsSECONDS captures enum value "SECONDS"
	MetricValueUnitsSECONDS string = "SECONDS"
	// MetricValueUnitsMINUTES captures enum value "MINUTES"
	MetricValueUnitsMINUTES string = "MINUTES"
	// MetricValueUnitsHOURS captures enum value "HOURS"
	MetricValueUnitsHOURS string = "HOURS"
	// MetricValueUnitsDAYS captures enum value "DAYS"
	MetricValueUnitsDAYS string = "DAYS"
)

// prop value enum
func (m *MetricValue) validateUnitsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, metricValueTypeUnitsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MetricValue) validateUnits(formats strfmt.Registry) error {

	if swag.IsZero(m.Units) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnitsEnum("units", "body", m.Units); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetricValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricValue) UnmarshalBinary(b []byte) error {
	var res MetricValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
