// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PeerErrorState peer error state
// swagger:model PeerErrorState
type PeerErrorState string

const (
	// PeerErrorStateREJECTED captures enum value "REJECTED"
	PeerErrorStateREJECTED PeerErrorState = "REJECTED"
	// PeerErrorStateEXPIRED captures enum value "EXPIRED"
	PeerErrorStateEXPIRED PeerErrorState = "EXPIRED"
	// PeerErrorStateINVALIDARGUMENT captures enum value "INVALID_ARGUMENT"
	PeerErrorStateINVALIDARGUMENT PeerErrorState = "INVALID_ARGUMENT"
)

// for schema
var peerErrorStateEnum []interface{}

func init() {
	var res []PeerErrorState
	if err := json.Unmarshal([]byte(`["REJECTED","EXPIRED","INVALID_ARGUMENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		peerErrorStateEnum = append(peerErrorStateEnum, v)
	}
}

func (m PeerErrorState) validatePeerErrorStateEnum(path, location string, value PeerErrorState) error {
	if err := validate.Enum(path, location, value, peerErrorStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this peer error state
func (m PeerErrorState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePeerErrorStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
