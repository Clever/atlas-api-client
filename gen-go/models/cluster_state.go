// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ClusterState cluster state
// swagger:model ClusterState
type ClusterState string

const (
	// ClusterStateIDLE captures enum value "IDLE"
	ClusterStateIDLE ClusterState = "IDLE"
	// ClusterStateCREATING captures enum value "CREATING"
	ClusterStateCREATING ClusterState = "CREATING"
	// ClusterStateUPDATING captures enum value "UPDATING"
	ClusterStateUPDATING ClusterState = "UPDATING"
	// ClusterStateDELETING captures enum value "DELETING"
	ClusterStateDELETING ClusterState = "DELETING"
	// ClusterStateDELETED captures enum value "DELETED"
	ClusterStateDELETED ClusterState = "DELETED"
	// ClusterStateREPAIRING captures enum value "REPAIRING"
	ClusterStateREPAIRING ClusterState = "REPAIRING"
)

// for schema
var clusterStateEnum []interface{}

func init() {
	var res []ClusterState
	if err := json.Unmarshal([]byte(`["IDLE","CREATING","UPDATING","DELETING","DELETED","REPAIRING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterStateEnum = append(clusterStateEnum, v)
	}
}

func (m ClusterState) validateClusterStateEnum(path, location string, value ClusterState) error {
	if err := validate.Enum(path, location, value, clusterStateEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this cluster state
func (m ClusterState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateClusterStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
