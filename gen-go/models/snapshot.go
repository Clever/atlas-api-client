// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Snapshot snapshot
// swagger:model Snapshot
type Snapshot struct {

	// The unique ID of the cluster that the snapshot represents.
	ClusterID string `json:"clusterId,omitempty"`

	// Indicates whether the snapshot exists. This is false if the snapshot creation job is in progress.
	Complete bool `json:"complete,omitempty"`

	// created
	Created *SnapshotTimestamp `json:"created,omitempty"`

	// Specifies whether the snapshot can be deleted.
	DoNotDelete bool `json:"doNotDelete,omitempty"`

	// The date in ISO 8601 date and time format in UTC after which Atlas deletes the snapshot. If doNotDelete is set to true, any value in expires is removed. If the expires value is earlier than the current date and time, the snaphot cannot be edited.
	Expires strfmt.DateTime `json:"expires,omitempty"`

	// ID of the project that owns the snapshot.
	GroupID string `json:"groupId,omitempty"`

	// ID of the snapshot.
	ID string `json:"id,omitempty"`

	// last oplog applied timestamp
	LastOplogAppliedTimestamp *SnapshotTimestamp `json:"lastOplogAppliedTimestamp,omitempty"`

	// links
	Links []*Link `json:"links"`

	// The individual parts that comprise the complete snapshot. For a replica set, this array contains a single document. For a sharded cluster, this array contains one document for each shard plus one document for the config server.
	Parts []*SnapshotPart `json:"parts"`
}

// Validate validates this snapshot
func (m *Snapshot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastOplogAppliedTimestamp(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Snapshot) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if m.Created != nil {

		if err := m.Created.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("created")
			}
			return err
		}
	}

	return nil
}

func (m *Snapshot) validateLastOplogAppliedTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.LastOplogAppliedTimestamp) { // not required
		return nil
	}

	if m.LastOplogAppliedTimestamp != nil {

		if err := m.LastOplogAppliedTimestamp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastOplogAppliedTimestamp")
			}
			return err
		}
	}

	return nil
}

func (m *Snapshot) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {

		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {

			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Snapshot) validateParts(formats strfmt.Registry) error {

	if swag.IsZero(m.Parts) { // not required
		return nil
	}

	for i := 0; i < len(m.Parts); i++ {

		if swag.IsZero(m.Parts[i]) { // not required
			continue
		}

		if m.Parts[i] != nil {

			if err := m.Parts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Snapshot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Snapshot) UnmarshalBinary(b []byte) error {
	var res Snapshot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
