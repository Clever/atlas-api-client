// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PeerStatus peer status
// swagger:model PeerStatus
type PeerStatus string

const (
	// PeerStatusINITIATING captures enum value "INITIATING"
	PeerStatusINITIATING PeerStatus = "INITIATING"
	// PeerStatusPENDINGACCEPTANCE captures enum value "PENDING_ACCEPTANCE"
	PeerStatusPENDINGACCEPTANCE PeerStatus = "PENDING_ACCEPTANCE"
	// PeerStatusFAILED captures enum value "FAILED"
	PeerStatusFAILED PeerStatus = "FAILED"
	// PeerStatusFINALIZING captures enum value "FINALIZING"
	PeerStatusFINALIZING PeerStatus = "FINALIZING"
	// PeerStatusAVAILABLE captures enum value "AVAILABLE"
	PeerStatusAVAILABLE PeerStatus = "AVAILABLE"
	// PeerStatusTERMINATING captures enum value "TERMINATING"
	PeerStatusTERMINATING PeerStatus = "TERMINATING"
)

// for schema
var peerStatusEnum []interface{}

func init() {
	var res []PeerStatus
	if err := json.Unmarshal([]byte(`["INITIATING","PENDING_ACCEPTANCE","FAILED","FINALIZING","AVAILABLE","TERMINATING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		peerStatusEnum = append(peerStatusEnum, v)
	}
}

func (m PeerStatus) validatePeerStatusEnum(path, location string, value PeerStatus) error {
	if err := validate.Enum(path, location, value, peerStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this peer status
func (m PeerStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePeerStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
