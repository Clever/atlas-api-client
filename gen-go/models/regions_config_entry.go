// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegionsConfigEntry regions config entry
// swagger:model RegionsConfigEntry
type RegionsConfigEntry struct {

	// analytics nodes
	// Required: true
	AnalyticsNodes *int64 `json:"analyticsNodes"`

	// electable nodes
	// Required: true
	ElectableNodes *int64 `json:"electableNodes"`

	// priority
	// Required: true
	Priority *float64 `json:"priority"`

	// read only nodes
	// Required: true
	ReadOnlyNodes *int64 `json:"readOnlyNodes"`
}

// Validate validates this regions config entry
func (m *RegionsConfigEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnalyticsNodes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateElectableNodes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReadOnlyNodes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegionsConfigEntry) validateAnalyticsNodes(formats strfmt.Registry) error {

	if err := validate.Required("analyticsNodes", "body", m.AnalyticsNodes); err != nil {
		return err
	}

	return nil
}

func (m *RegionsConfigEntry) validateElectableNodes(formats strfmt.Registry) error {

	if err := validate.Required("electableNodes", "body", m.ElectableNodes); err != nil {
		return err
	}

	return nil
}

func (m *RegionsConfigEntry) validatePriority(formats strfmt.Registry) error {

	if err := validate.Required("priority", "body", m.Priority); err != nil {
		return err
	}

	return nil
}

func (m *RegionsConfigEntry) validateReadOnlyNodes(formats strfmt.Registry) error {

	if err := validate.Required("readOnlyNodes", "body", m.ReadOnlyNodes); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegionsConfigEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegionsConfigEntry) UnmarshalBinary(b []byte) error {
	var res RegionsConfigEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
