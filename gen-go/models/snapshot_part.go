// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotPart snapshot part
// swagger:model SnapshotPart
type SnapshotPart struct {

	// ID of the replica set.
	ClusterID string `json:"clusterId,omitempty"`

	// Method of compression for the snapshot.
	CompressionSetting string `json:"compressionSetting,omitempty"`

	// The total size of the data in the snapshot in bytes.
	DataSizeBytes float64 `json:"dataSizeBytes,omitempty"`

	// Indicates whether the snapshot is encrypted.
	EncryptionEnabled bool `json:"encryptionEnabled,omitempty"`

	// The total size of the data files in bytes.
	FileSizeBytes float64 `json:"fileSizeBytes,omitempty"`

	// The KMIP master key ID used to encrypt the snapshot data. NOTE - This appears only if encryptionEnabled is true.
	MasterKeyUUID string `json:"masterKeyUUID,omitempty"`

	// The version of MongoDB that the replica set primary was running when the snapshot was created.
	MongodVersion string `json:"mongodVersion,omitempty"`

	// Name of the replica set.
	ReplicaSetName string `json:"replicaSetName,omitempty"`

	// The total size of space allocated for document storage.
	StorageSizeBytes float64 `json:"storageSizeBytes,omitempty"`

	// The type of server that the part represents
	TypeName string `json:"typeName,omitempty"`
}

// Validate validates this snapshot part
func (m *SnapshotPart) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTypeName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var snapshotPartTypeTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REPLICA_SET","CONFIG_SERVER_REPLICA_SET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		snapshotPartTypeTypeNamePropEnum = append(snapshotPartTypeTypeNamePropEnum, v)
	}
}

const (
	// SnapshotPartTypeNameREPLICASET captures enum value "REPLICA_SET"
	SnapshotPartTypeNameREPLICASET string = "REPLICA_SET"
	// SnapshotPartTypeNameCONFIGSERVERREPLICASET captures enum value "CONFIG_SERVER_REPLICA_SET"
	SnapshotPartTypeNameCONFIGSERVERREPLICASET string = "CONFIG_SERVER_REPLICA_SET"
)

// prop value enum
func (m *SnapshotPart) validateTypeNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, snapshotPartTypeTypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SnapshotPart) validateTypeName(formats strfmt.Registry) error {

	if swag.IsZero(m.TypeName) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeNameEnum("typeName", "body", m.TypeName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPart) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPart) UnmarshalBinary(b []byte) error {
	var res SnapshotPart
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
