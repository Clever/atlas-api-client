// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Event event
// swagger:model Event
type Event struct {

	// alert config Id
	AlertConfigID string `json:"alertConfigId,omitempty"`

	// alert Id
	AlertID string `json:"alertId,omitempty"`

	// api key Id
	APIKeyID string `json:"apiKeyId,omitempty"`

	// collection
	Collection string `json:"collection,omitempty"`

	// created
	Created strfmt.DateTime `json:"created,omitempty"`

	// current value
	CurrentValue *MetricValue `json:"currentValue,omitempty"`

	// database
	Database string `json:"database,omitempty"`

	// event type name
	EventTypeName EventType `json:"eventTypeName,omitempty"`

	// group Id
	GroupID string `json:"groupId,omitempty"`

	// hostname
	Hostname string `json:"hostname,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// invoice Id
	InvoiceID string `json:"invoiceId,omitempty"`

	// is global admin
	IsGlobalAdmin bool `json:"isGlobalAdmin,omitempty"`

	// links
	Links []*Link `json:"links"`

	// metric name
	MetricName string `json:"metricName,omitempty"`

	// op type
	OpType string `json:"opType,omitempty"`

	// org Id
	OrgID string `json:"orgId,omitempty"`

	// payment Id
	PaymentID string `json:"paymentId,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// public key
	PublicKey string `json:"publicKey,omitempty"`

	// remote address
	RemoteAddress string `json:"remoteAddress,omitempty"`

	// replica set name
	ReplicaSetName string `json:"replicaSetName,omitempty"`

	// shard name
	ShardName string `json:"shardName,omitempty"`

	// target public key
	TargetPublicKey string `json:"targetPublicKey,omitempty"`

	// target username
	TargetUsername string `json:"targetUsername,omitempty"`

	// team ID
	TeamID string `json:"teamID,omitempty"`

	// user Id
	UserID string `json:"userId,omitempty"`

	// username
	Username string `json:"username,omitempty"`

	// whitelist entry
	WhitelistEntry string `json:"whitelistEntry,omitempty"`
}

// Validate validates this event
func (m *Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEventTypeName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Event) validateCurrentValue(formats strfmt.Registry) error {

	if swag.IsZero(m.CurrentValue) { // not required
		return nil
	}

	if m.CurrentValue != nil {

		if err := m.CurrentValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentValue")
			}
			return err
		}
	}

	return nil
}

func (m *Event) validateEventTypeName(formats strfmt.Registry) error {

	if swag.IsZero(m.EventTypeName) { // not required
		return nil
	}

	if err := m.EventTypeName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("eventTypeName")
		}
		return err
	}

	return nil
}

func (m *Event) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	for i := 0; i < len(m.Links); i++ {

		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {

			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Event) UnmarshalBinary(b []byte) error {
	var res Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
